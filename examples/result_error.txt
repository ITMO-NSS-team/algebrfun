C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\baseline\BasicEvolutionaryEntities.py:133: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.
  sort_ampls = np.array(sorted(list(zip(my_idxs, amplitudes)), key=lambda x: x[1], reverse=True))[:, 0]
Traceback (most recent call last):
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\examples\ex1.py", line 150, in <module>
    population.evolutionary()
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\default\EvolutionEntities.py", line 137, in evolutionary
    self._evolutionary_step()
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\default\EvolutionEntities.py", line 124, in _evolutionary_step
    self.apply_operator('UnifierParallelizedPopulation')
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\baseline\BasicEvolutionaryEntities.py", line 501, in apply_operator
    return operator.apply_to(self, *args, *kwargs)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\baseline\BasicEvolutionaryEntities.py", line 558, in apply_to
    return self.apply(population, *args, **kwargs)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\default\geneticOperators\Unifiers.py", line 29, in apply
    population.apply_operator('PeriodicTokensOptimizerPopulation')
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\baseline\BasicEvolutionaryEntities.py", line 501, in apply_operator
    return operator.apply_to(self, *args, *kwargs)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\baseline\BasicEvolutionaryEntities.py", line 558, in apply_to
    return self.apply(population, *args, **kwargs)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\default\geneticOperators\Optimizers.py", line 462, in apply
    individ.apply_operator('ImpComplexDiscreteTokenParamsOptimizer')
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\baseline\BasicEvolutionaryEntities.py", line 463, in apply_operator
    return operator.apply_to(self, *args, **kwargs)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\baseline\BasicEvolutionaryEntities.py", line 533, in apply_to
    ret = self.apply(individ, *args, **kwargs)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\default\geneticOperators\supplementary\Other.py", line 31, in wrapper
    ret = method(*args, **kwargs)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\default\geneticOperators\ComplexOptimizers.py", line 337, in apply
    self._optimize_token_params(individ, complex_token)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\default\geneticOperators\ComplexOptimizers.py", line 536, in _optimize_token_params
    pulse_starts = self._find_pulse_starts(target, complex_token)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\default\geneticOperators\ComplexOptimizers.py", line 149, in _find_pulse_starts
    single_pattern_value = self._get_single_pattern_value(complex_token)
  File "C:\Users\User\Desktop\ntcv\alg\algebrfun\buildingBlocks\default\geneticOperators\ComplexOptimizers.py", line 104, in _get_single_pattern_value
    assert (single_pattern_value != 0).any(), 'hmm'
AssertionError: hmm
